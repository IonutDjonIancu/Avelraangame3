@model Character

@* Character/DetailsOf *@
<div class="row">
    <div class="col-8">
        <div class="btn-group btn-group-sm" role="group" aria-label="Basic example">
            <button class="btn btn-outline-secondary" onclick="navigateTo('/Character/Create')">Create</button>
            <button class="btn btn-outline-secondary" onclick="navigateTo('/Character/Details/' + getPlayerId())">Characters</button>
        </div>
    </div>
    <div class="col-4">
        <div id="spinner" class="spinner-grow text-secondary float-end" role="status" title="Loading...">
            <span class="visually-hidden">Loading...</span>
        </div>
    </div>
</div>

<div class="container mt-3 footer-border">
    <div class="row d-flex justify-content-between mt-3">
        @* Portrait *@
        <div class="col-1">
            <p class="mb-0">Portrait</p>
            <img class="rounded-3 mt-3 ms-4 pointer" src="@Model.Details.Portrait" width="60" height="80" title="this is how your character will look on the battleboard" />
        </div>
        @* Details *@
        <div class="col-3">
            <p class="mb-0">Character</p>
            <ul>
                @if(Model.Details.IsLocked)
                {
                    <li class="text-gray">
                        <span class="text-red">character locked (@Model.Details.BoardType)</span>
                    </li>
                }
                <li class="text-gray">
                    name: <span class="primary-green">@Model.Details.Name</span>
                </li>
                <li class="text-gray">
                    race: <span class="primary-green">@Model.Details.Race</span>
                </li>
                <li class="text-gray">
                    culture: <span class="primary-green">@Model.Details.Culture</span>
                </li>
                <li class="text-gray">
                    specialization: <span class="primary-green">@Model.Details.Spec</span>
                </li>
                <li class="text-gray">
                    entity level: <span class="primary-green">@Model.Details.Entitylevel</span>
                </li>
                @if (Model.Details.Levelup > 0)
                {
                    <li class="text-gray">
                        level up pts.: <span class="text-orange">@Model.Details.Levelup</span>
                    </li>
                }
                else
                {
                    <li class="text-gray">
                        level up pts.: <span class="primary-green">@Model.Details.Levelup</span>
                    </li>
                }
                <li class="text-gray">
                    wealth: <span class="primary-green">@Model.Details.Wealth</span>
                </li>
                <li class="text-gray">
                    worth: <span class="primary-green">@Model.Details.Worth</span>
                </li>
                <li class="text-gray">
                    renown: <span class="primary-green">@Model.Details.Renown</span>
                </li>
            </ul>
        </div>
        @* Stats *@
        <div class="col-3">
            <p class="mb-0">Stats</p>
            <ul>
                <li class="text-gray">
                    @if (Model.Details.Levelup > 0) { <button onclick="levelup('Hitpoints')" class="btn btn-outline-dark py-0 px-1" style="opacity: 0.3">+</button> } 
                    Hitpoints:
                    <span class="primary-green">@Model.Stats.Actual.Hitpoints</span>
                </li>
                <li class="text-gray">
                    @if (Model.Details.Levelup > 0) { <button onclick="levelup('Defense')" class="btn btn-outline-dark py-0 px-1" style="opacity: 0.3">+</button> } 
                    Defense:
                    <span class="primary-green">@Model.Stats.Actual.Defense</span>
                </li>
                <li class="text-gray">
                    @if (Model.Details.Levelup > 0) { <button onclick="levelup('Mana')" class="btn btn-outline-dark py-0 px-1" style="opacity: 0.3">+</button> } 
                    Mana:
                    <span class="primary-green">@Model.Stats.Actual.Mana</span>
                </li>
                <li class="text-gray">
                    @if (Model.Details.Levelup > 0) { <button onclick="levelup('Actions')" class="btn btn-outline-dark py-0 px-1" style="opacity: 0.3">+</button> } 
                    Actions:
                    <span class="primary-green">@Model.Stats.Actual.Actions</span>
                </li>
                <li class="text-gray">
                    @if (Model.Details.Levelup > 0) { <button onclick="levelup('Strength')" class="btn btn-outline-dark py-0 px-1" style="opacity: 0.3">+</button> } 
                    Strength:
                    <span class="primary-green">@Model.Stats.Actual.Strength</span>
                </li>
                <li class="text-gray">
                    @if (Model.Details.Levelup > 0) { <button onclick="levelup('Constitution')" class="btn btn-outline-dark py-0 px-1" style="opacity: 0.3">+</button> } 
                    Constitution:
                    <span class="primary-green">@Model.Stats.Actual.Constitution</span>
                </li>
                <li class="text-gray">
                    @if (Model.Details.Levelup > 0) { <button onclick="levelup('Agility')" class="btn btn-outline-dark py-0 px-1" style="opacity: 0.3">+</button> } 
                    Agility:
                    <span class="primary-green">@Model.Stats.Actual.Agility</span>
                </li>
                <li class="text-gray">
                    @if (Model.Details.Levelup > 0) { <button onclick="levelup('Willpower')" class="btn btn-outline-dark py-0 px-1" style="opacity: 0.3">+</button> } 
                    Willpower:
                    <span class="primary-green">@Model.Stats.Actual.Willpower</span>
                </li>
                <li class="text-gray">
                    @if (Model.Details.Levelup > 0) { <button onclick="levelup('Abstract')" class="btn btn-outline-dark py-0 px-1" style="opacity: 0.3">+</button> } 
                    Abstract:
                    <span class="primary-green">@Model.Stats.Actual.Abstract</span>
                </li>
            </ul>
        </div>
        @* Skills *@
        <div class="col-3">
            <p class="mb-0">Skills</p>
            <ul>
                <li class="text-gray">
                    @if (Model.Details.Levelup > 0) { <button onclick="levelup('Melee')" class="btn btn-outline-dark py-0 px-1" style="opacity: 0.3">+</button> } 
                    Melee:
                    <span class="primary-green">@Model.Stats.Actual.Melee</span>
                </li>
                <li class="text-gray">
                    @if (Model.Details.Levelup > 0) { <button onclick="levelup('Arcane')" class="btn btn-outline-dark py-0 px-1" style="opacity: 0.3">+</button> } 
                    Arcane:
                    <span class="primary-green">@Model.Stats.Actual.Arcane</span>
                </li>
                <li class="text-gray">
                    @if (Model.Details.Levelup > 0) { <button onclick="levelup('Psionics')" class="btn btn-outline-dark py-0 px-1" style="opacity: 0.3">+</button> } 
                    Psionics:
                    <span class="primary-green">@Model.Stats.Actual.Psionics</span>
                </li>
                <li class="text-gray">
                    @if (Model.Details.Levelup > 0) { <button onclick="levelup('Social')" class="btn btn-outline-dark py-0 px-1" style="opacity: 0.3">+</button> } 
                    Social:
                    <span class="primary-green">@Model.Stats.Actual.Social</span>
                </li>
                <li class="text-gray">
                    @if (Model.Details.Levelup > 0) { <button onclick="levelup('Hide')" class="btn btn-outline-dark py-0 px-1" style="opacity: 0.3">+</button> } 
                    Hide:
                    <span class="primary-green">@Model.Stats.Actual.Hide</span>
                </li>
                <li class="text-gray">
                    @if (Model.Details.Levelup > 0) { <button onclick="levelup('Survival')" class="btn btn-outline-dark py-0 px-1" style="opacity: 0.3">+</button> } 
                    Survival:
                    <span class="primary-green">@Model.Stats.Actual.Survival</span>
                </li>
                <li class="text-gray">
                    @if (Model.Details.Levelup > 0) { <button onclick="levelup('Tactics')" class="btn btn-outline-dark py-0 px-1" style="opacity: 0.3">+</button> } 
                    Tactics:
                    <span class="primary-green">@Model.Stats.Actual.Tactics</span>
                </li>
                <li class="text-gray">
                    @if (Model.Details.Levelup > 0) { <button onclick="levelup('Aid')" class="btn btn-outline-dark py-0 px-1" style="opacity: 0.3">+</button> } 
                    Aid:
                    <span class="primary-green">@Model.Stats.Actual.Aid</span>
                </li>
                <li class="text-gray">
                    @if (Model.Details.Levelup > 0) { <button onclick="levelup('Crafting')" class="btn btn-outline-dark py-0 px-1" style="opacity: 0.3">+</button> } 
                    Crafting:
                    <span class="primary-green">@Model.Stats.Actual.Crafting</span>
                </li>
                <li class="text-gray">
                    @if (Model.Details.Levelup > 0) { <button onclick="levelup('Perception')" class="btn btn-outline-dark py-0 px-1" style="opacity: 0.3">+</button> } 
                    Perception:
                    <span class="primary-green">@Model.Stats.Actual.Perception</span>
                </li>
            </ul>
        </div>
    </div>
</div>

@* Items and inventory *@
<div class="container mt-3 footer-border">
    @* Item actions *@
    <div id="inventoryActions" class="btn-group btn-group-sm pt-3" role="group" style="display:none">
        <button onclick="equipItem()" id="equipAction" type="button" class="btn btn-outline-dark actions primary-darkgreen" style="display:none">&#8592; equip</button>
        <button onclick="unequipItem()" id="unequipAction" type="button" class="btn btn-outline-dark actions primary-darkyellow" style="display:none">unequip &#8594;</button>
        <button onclick="sellItem()" id="sellAction" type="button" class="btn btn-outline-dark actions" style="display:none">sell &#8605;</button>
        <button onclick="hideInventoryActions()" title="hide actions" type="button" class="btn btn-outline-dark actions secondary-darkred">&#10008;</button>
    </div>
    <div class="row mt-3">
        @* Inventory *@
        <div class="col-3">
            <p class="mb-2">Inventory</p>
            @foreach(var item in Model.Inventory)
            {
                <img 
                    src="@item.Icon" 
                    class="rounded-2 item item-@item.Level"
                    id="@item.Id"
                    onclick="equipUnequipItem('@item.Id', 'unequip', 'inventory')"
                    title="@item.Name
*** details ***
@(item.HasTaint ? "tainted" : "untainted")
@item.Type.ToLower()
level @item.Level
value @item.Value
*** stats ***
HPS @item.BonusStats.Hitpoints
DEF @item.BonusStats.Defense
MAN @item.BonusStats.Mana
ACT @item.BonusStats.Actions
STR @item.BonusStats.Strength
CNS @item.BonusStats.Constitution
AGL @item.BonusStats.Agility
WIL @item.BonusStats.Willpower
ABS @item.BonusStats.Abstract
*** skills ***
MEL @item.BonusStats.Melee
ARC @item.BonusStats.Arcane 
PSI @item.BonusStats.Psionics
SOC @item.BonusStats.Social
HID @item.BonusStats.Hide
SUR @item.BonusStats.Survival
TAC @item.BonusStats.Tactics
AID @item.BonusStats.Aid 
CRA @item.BonusStats.Crafting
PER @item.BonusStats.Perception" />
            }
        </div>
        @* Regalia *@
        <div class="col-3">
            <p class="mb-2">Regalia</p>
            @foreach(var trinket in Model.Regalia)
            {
                <img src="@trinket.Icon"
                        class="rounded-2 item item-@trinket.Level"
                        id="@trinket.Id"
                        onclick="equipUnequipItem('@trinket.Id', 'unequip', 'regalia')"
                        title="@trinket.Name
*** details ***
@(trinket.HasTaint ? "tainted" : "untainted")
@(trinket.IsPermanent ? "can be consumed" : "can only be worn")
@trinket.Type.ToLower()
level @trinket.Level
value @trinket.Value
*** stats ***
HPS @trinket.BonusStats.Hitpoints
DEF @trinket.BonusStats.Defense
MAN @trinket.BonusStats.Mana
ACT @trinket.BonusStats.Actions
STR @trinket.BonusStats.Strength
CNS @trinket.BonusStats.Constitution
AGL @trinket.BonusStats.Agility
WIL @trinket.BonusStats.Willpower
ABS @trinket.BonusStats.Abstract
*** skills ***
MEL @trinket.BonusStats.Melee
ARC @trinket.BonusStats.Arcane
PSI @trinket.BonusStats.Psionics
SOC @trinket.BonusStats.Social
HID @trinket.BonusStats.Hide
SUR @trinket.BonusStats.Survival
TAC @trinket.BonusStats.Tactics
AID @trinket.BonusStats.Aid
CRA @trinket.BonusStats.Crafting
PER @trinket.BonusStats.Perception " />
            }
        </div>
        @* Supplies *@
        <div class="col-6">
            <p class="mb-2">Supplies</p>
            @foreach (var suppliesItem in Model.Supplies.Items)
            {
                <img 
                    src="@suppliesItem.Icon" 
                    class="rounded-2 item item-@suppliesItem.Level"
                    id="@suppliesItem.Id"
                    onclick="equipUnequipItem('@suppliesItem.Id', 'equip', 'inventory')"
                    title="@suppliesItem.Name

*** details ***
@(suppliesItem.HasTaint ? "tainted" : "untainted")
@suppliesItem.Type.ToLower()
level @suppliesItem.Level
value @suppliesItem.Value
*** stats ***
HPS @suppliesItem.BonusStats.Hitpoints
DEF @suppliesItem.BonusStats.Defense
MAN @suppliesItem.BonusStats.Mana
ACT @suppliesItem.BonusStats.Actions
STR @suppliesItem.BonusStats.Strength
CNS @suppliesItem.BonusStats.Constitution
AGL @suppliesItem.BonusStats.Agility
WIL @suppliesItem.BonusStats.Willpower
ABS @suppliesItem.BonusStats.Abstract
*** skills ***
MEL @suppliesItem.BonusStats.Melee
ARC @suppliesItem.BonusStats.Arcane
PSI @suppliesItem.BonusStats.Psionics
SOC @suppliesItem.BonusStats.Social
HID @suppliesItem.BonusStats.Hide
SUR @suppliesItem.BonusStats.Survival
TAC @suppliesItem.BonusStats.Tactics
AID @suppliesItem.BonusStats.Aid
CRA @suppliesItem.BonusStats.Crafting
PER @suppliesItem.BonusStats.Perception " />
            }
            @foreach (var suppliesTrinket in Model.Supplies.Regalia)
            {
                <img src="@suppliesTrinket.Icon"
                     class="rounded-2 item item-@suppliesTrinket.Level"
                     id="@suppliesTrinket.Id"
                     onclick="equipUnequipItem('@suppliesTrinket.Id', 'equip', 'regalia')"
                     title="@suppliesTrinket.Name

*** details ***
@(suppliesTrinket.HasTaint ? "tainted" : "untainted")
@(suppliesTrinket.IsPermanent ? "can be consumed" : "can only be worn")
@suppliesTrinket.Type.ToLower()
level @suppliesTrinket.Level
value @suppliesTrinket.Value
*** stats ***
HPS @suppliesTrinket.BonusStats.Hitpoints
DEF @suppliesTrinket.BonusStats.Defense
MAN @suppliesTrinket.BonusStats.Mana
ACT @suppliesTrinket.BonusStats.Actions
STR @suppliesTrinket.BonusStats.Strength
CNS @suppliesTrinket.BonusStats.Constitution
AGL @suppliesTrinket.BonusStats.Agility
WIL @suppliesTrinket.BonusStats.Willpower
ABS @suppliesTrinket.BonusStats.Abstract
*** skills ***
MEL @suppliesTrinket.BonusStats.Melee
ARC @suppliesTrinket.BonusStats.Arcane
PSI @suppliesTrinket.BonusStats.Psionics
SOC @suppliesTrinket.BonusStats.Social
HID @suppliesTrinket.BonusStats.Hide
SUR @suppliesTrinket.BonusStats.Survival
TAC @suppliesTrinket.BonusStats.Tactics
AID @suppliesTrinket.BonusStats.Aid
CRA @suppliesTrinket.BonusStats.Crafting
PER @suppliesTrinket.BonusStats.Perception " />
            }
        </div>
    </div>
</div>

<script>
    const equipUnequipItem = (id, action, type) => {
        $("#inventoryActions").show();
        itemSelect(id);

        if (action === "unequip") {
            $("#unequipAction").show();
            $("#equipAction").hide();
            $("#sellAction").hide();
        } else if (action === "equip") {
            $("#unequipAction").hide();
            $("#equipAction").show();
            $("#sellAction").show();
        } 
    }

    const hideInventoryActions = () => {
        $("#inventoryActions").hide();
        $(".item").removeClass("selected");
    }

    const itemSelect = (id) => {
        localStorage.setItem("selectedItem", id);
        $(".item").removeClass("selected");
        $("#" + id).addClass("selected");
    }

    const equipItem = () => {

        var characterId = JSON.parse('@Html.Raw(Json.Serialize(Model))').identity.id;
        var playerId = getPlayerId();
        var itemId = localStorage.getItem("selectedItem");

        if (!characterId || !playerId || !itemId) return;
        showLoading();
        
        var url = "/Character/EquipItem";

        $.ajax({
            type: 'PUT',
            url: url,
            contentType: "application/json",
            data: JSON.stringify({
                itemId: itemId,
                characterId: characterId,
                playerId: playerId
            }),
            success: function (response) {
                location.reload();
            },
            error: function (xhr, status, error) {
                alert(xhr.responseText);
                hideLoading();
            }
        });
    }

    const unequipItem = () => {

        var characterId = JSON.parse('@Html.Raw(Json.Serialize(Model))').identity.id;
        var playerId = getPlayerId();
        var itemId = localStorage.getItem("selectedItem");

        if (!characterId || !playerId || !itemId) return;
        showLoading();

        var url = "/Character/UnequipItem";

        $.ajax({
            type: 'PUT',
            url: url,
            contentType: "application/json",
            data: JSON.stringify({
                itemId: itemId,
                characterId: characterId,
                playerId: playerId
            }),
             success: function (response) {
                location.reload();
            },
            error: function (xhr, status, error) {
                alert(xhr.responseText);
                hideLoading();
            }
        });
    }

    const sellItem = () => {

        var characterId = JSON.parse('@Html.Raw(Json.Serialize(Model))').identity.id;
        var playerId = getPlayerId();
        var itemId = localStorage.getItem("selectedItem");

        if (!characterId || !playerId || !itemId) return;
        showLoading();

        var url = "/Character/SellItem";

        $.ajax({
            type: 'PUT',
            url: url,
            contentType: "application/json",
            data: JSON.stringify({
                itemId: itemId,
                characterId: characterId,
                playerId: playerId
            }),
            success: function (response) {
                location.reload();
            },
            error: function (xhr, status, error) {
                alert(xhr.responseText);
                hideLoading();
            }
        });
    }

    const levelup = (attr) => {

        const playerId = getPlayerId();
        if(!playerId) return;

        var characterId = JSON.parse('@Html.Raw(Json.Serialize(Model))').identity.id;

        showLoading();

        var url = "/Character/Levelup"

        $.ajax({
            type: 'PUT',
            url: url,
            contentType: "application/json",
            data: JSON.stringify({
                characterId: characterId,
                playerId: playerId,
                stat: attr
            }),
            success: function (response) {
                location.reload();
            },
            error: function (xhr, status, error) {
                alert(xhr.responseText);
                hideLoading();
            }
        });
    }

    // run on load
    $(document).ready(() => {
        hideLoading();
        logModel();
    });
</script>